/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ua.com.parkcode.web.ptp.services;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import ua.com.parkcode.commons.sqldb.ExecuteQuery;
import ua.com.parkcode.commons.sqldb.SelectForListQuery;
import ua.com.parkcode.commons.sqldb.SelectForObjectQuery;
import ua.com.parkcode.web.ptp.data.Program;
import ua.com.parkcode.commons.web.app.services.AbstractDBService;
import ua.com.parkcode.web.ptp.ApplicationManager;
import ua.com.parkcode.web.ptp.data.Evaluation;
import ua.com.parkcode.web.ptp.data.PropertyForProgram;
import ua.com.parkcode.web.ptp.data.PropertyForm;
import ua.com.parkcode.web.ptp.data.PropertyGroup;
import ua.com.parkcode.web.ptp.data.PropertyValue;
import ua.com.parkcode.web.ptp.data.User;

/**
 * <b>Предназначение:</b><br/>
 *   <p></p>
 *
 * <br/><b>Описание:</b><br/>
 *   <p></p>
 *
 * <br/>Создан 2013.07.04<br/>
 *
 * @author Artem (g-art) Gerasimenko || gerasimenko.art@gmail.com
 */
@Service("programService")
public class ProgramService extends AbstractDBService{

    @Autowired
    private SelectForObjectQuery<Program> selectProgramByUUID;

    @Autowired
    private SelectForObjectQuery<Program> selectProgramFormByEntryUUID;

    @Autowired
    private SelectForListQuery<Program> selectAllActualProgram;

    @Autowired
    private SelectForListQuery<Program> selectAllActualProgramByAdmin;

    @Autowired
    private SelectForListQuery<Program> selectAllProgram;

    @Autowired
    private ExecuteQuery insertUserProgram;

    @Autowired
    private ExecuteQuery updateUserProgram;

    @Autowired
    private ExecuteQuery insertNewProgram;

    @Autowired
    private ExecuteQuery insertNewGroup;

    @Autowired
    private ExecuteQuery insertPropertyGroupInProgram;

    @Autowired
    private ExecuteQuery insertPropertyValue;

    @Autowired
    private ExecuteQuery deletePropertyValue;

    @Autowired
    private ExecuteQuery insertPropertyForm;

    @Autowired
    private ExecuteQuery deletePropertyForm;

    @Autowired
    private ExecuteQuery updateProgram;

    @Autowired
    private SelectForObjectQuery<Long> selectCountSimpleProgramByUser;

    @Autowired
    private SelectForObjectQuery<Long> selectCountSimpleProgram;

    @Autowired
    private SelectForObjectQuery<Long> selectCountSimpleGroup;

    @Autowired
    private SelectForListQuery<Program> selectUserEntryProgram;

    @Autowired
    private SelectForListQuery<Program> selectUserEntryActualProgram;

    @Autowired
    private SelectForListQuery<PropertyGroup> selectProperty;

    @Autowired
    private SelectForListQuery<PropertyForm> selectFormProperty;

    @Autowired
    private SelectForListQuery<PropertyGroup> selectAllGeneralPropertyGroup;

    @Autowired
    private SelectForListQuery<PropertyGroup> selectAllPropertyGroupByProgram;

    @Autowired
    private SelectForListQuery<Program> selectActualProgramsForExpert;

    @Autowired
    private ExecuteQuery insertExpertProgram;

    @Autowired
    private ExecuteQuery deleteEvaluation;

    @Autowired
    private ExecuteQuery insertEvaluation;

    @Autowired
    private ExecuteQuery deleteExpertProgram;

    @Autowired
    private ExecuteQuery deleteUserProgram;

    @Autowired
    private ExecuteQuery deleteProgram;

    @Autowired
    private SelectForObjectQuery<Program> selectUserFormExpertProgram;

//    @Autowired
//    private SelectForObjectQuery<Long> selectCountSimpleExpertProgram;




    public void updateUserProgram(Program fullProgram){

        updateUserProgram.execute(makeNamedParams("review",     fullProgram.isReview(),
                                                  "accept",     fullProgram.isAccept(),
                                                  "estimated",  fullProgram.isEstimated(),
                                                  "entryUUID",  fullProgram.getEntryUUID()));

    }




    public Program selectUserFormExpertProgram(String programUUID, String userUUID){
        return selectUserFormExpertProgram.selectForObject(makeNamedParams("programUUID", programUUID,"userUUID", userUUID));
    }



    public void saveExpertPrograms(List<User> user, Program programs)
    {
        if (programs != null)
        {
            deleteExpertProgram.execute(makeSingleNamedParam("programUUID", programs.getUuid()));
            if (user != null && !user.isEmpty())
            {
                for (User usr : user)
                {
                    insertExpertProgram.execute(makeNamedParams("userUUID", usr.getUuid(), "programUUID", programs.getUuid()));
                }
            }
        }
    }

    public void deleteUserProgram(String userUUID, String programUUID)
    {
        deleteUserProgram.execute(makeNamedParams("userUUID",userUUID,"programUUID", programUUID));
    }

    public void deleteProgram(String programUUID){
        deleteProgram.execute(makeSingleNamedParam("programUUID", programUUID));
    }

    public void deleteEvaluation(Evaluation eval){
        deleteEvaluation.execute(makeSingleParam(eval));
    }

    public void insertEvaluation(Evaluation eval, String entryUUID)
    {
        insertEvaluation.execute(makeNamedParams("objectUUID",          eval.getEvaluationUuid(),
                                                 "userUUID",            eval.getExpert().getUuid(),
                                                 "entryUUID",           entryUUID,
                                                 "expertAssessment1",   eval.getExpertAssessment1(),
                                                 "expertAssessment2",   eval.getExpertAssessment2(),
                                                 "expertAssessment3",   eval.getExpertAssessment3(),
                                                 "expertAssessment4",   eval.getExpertAssessment4(),
                                                 "expertAssessment5",   eval.getExpertAssessment5()));
    }


    public void saveEvaluation(Evaluation eval, String entryUUID)
    {
        deleteEvaluation(eval);
        insertEvaluation(eval, entryUUID);
    }



    public List<Program> selectActualProgramsForExpert(String expertUUID)
    {
        return selectActualProgramsForExpert.selectForList(makeSingleNamedParam("userUUID", expertUUID));
    }


    public List<PropertyGroup> selectAllPropertyGroupByProgram(String programUUID)
    {
        return selectAllPropertyGroupByProgram.selectForList(makeSingleNamedParam("programUUID", programUUID));
    }


    public List<PropertyGroup> selectAllGeneralPropertyGroup()
    {
        return selectAllGeneralPropertyGroup.selectForList();
    }

    public List<PropertyGroup> selectPropertyByProgram(String ownerUUID, String programUUID)
    {
        List<PropertyGroup> pg = selectProperty.selectForList(makeNamedParams("ownerUUID", ownerUUID, "programUUID", programUUID));
        for(PropertyGroup propertyGroup: pg)
        {
            if(propertyGroup.getProperties() != null && !propertyGroup.getProperties().isEmpty())
            {
                for (PropertyForProgram property : propertyGroup.getProperties())
                {
                    if (property.getPropertyType().equalsIgnoreCase(ApplicationManager.PROPERTY_VALUE_TUPE__FORM))
                    {
                        property.setForm((List<PropertyForm>) selectFormProperty.selectForList(makeNamedParams("ownerUUID", ownerUUID, "propertyUUID", property.getObjectUuid())));
                        property.getObjectUuid();
                    }
                }
            }

        }
        return pg;
    }

    public List<Program> selectUserEntryProgram(String userUUID)
    {
        return selectUserEntryProgram.selectForList(makeSingleNamedParam("userUUID", userUUID));
    }

    public List<Program> selectUserEntryActualProgram(String userUUID)
    {
        return selectUserEntryActualProgram.selectForList(makeSingleNamedParam("userUUID", userUUID));
    }

    public List<Program> selectAllActualProgram()
    {
        return selectAllActualProgram.selectForList();
    }


    public List<Program> selectAllActualProgramByAdmin()
    {
        return selectAllActualProgramByAdmin.selectForList();
    }


     public List<Program> selectAllProgram()
    {
        return selectAllProgram.selectForList();
    }

    public Program selectProgramByUUID(String uuid){
        return selectProgramByUUID.selectForObject(makeSingleNamedParam("programUUID", uuid));
    }

     public Program selectProgramFormByEntryUUID(String uuid){
        return selectProgramFormByEntryUUID.selectForObject(makeSingleNamedParam("formUUID", uuid));
    }

    public void insertUserProgram(Program fullProgram){
        insertUserProgram.execute(makeNamedParams("review",     fullProgram.isReview(),
                                                  "accept",     fullProgram.isAccept(),
                                                  "estimated",  fullProgram.isEstimated(),
                                                  "entryUUID",  fullProgram.getEntryUUID(),
                                                  "userUUID",   fullProgram.getUser().getUuid(),
                                                  "programUUID",fullProgram.getUuid()));
    }

    public void insertPropertyValue(PropertyValue value)
    {
        insertPropertyValue.execute(makeSingleParam(value));
    }


    public void deletePropertyValue(PropertyValue value)
    {
        deletePropertyValue.execute(makeSingleParam(value));
    }


    public void savePropertyValue(PropertyValue value)
    {
        deletePropertyValue.execute(makeSingleParam(value));
        insertPropertyValue(value);
    }

    public void savePropertyValue(List<PropertyValue> value)
    {
        if(value!= null && !value.isEmpty())
        {
            for (PropertyValue propertyValue : value) {
                savePropertyValue(propertyValue);
            }
        }
    }


    public void insertPropertyForm(String objectUUID, String propertyFormTypeUUID, String ownerUUID)
    {
        insertPropertyForm.execute(makeNamedParams("objectUUID", objectUUID, "propertyUUID", propertyFormTypeUUID, "ownerUUID", ownerUUID));
    }


    public void deletePropertyForm(PropertyForm form)
    {
        deletePropertyForm.execute(makeSingleParam(form));
    }

    public void savePropertyFormType(PropertyForProgram property)
    {
        for (PropertyForm form : property.getForm())
        {
            deletePropertyForm(form);
            insertPropertyForm(form.getFormUUID(), property.getObjectUuid() ,form.getOwnerUUID());
            for(PropertyForProgram formProperty: form.getProperties())
            {
                savePropertyValue(formProperty.getValue());
            }
        }
    }


    public void saveUserProgram(Program fullProgram)
    {
        if(isProgramAlreadyEntry(fullProgram, fullProgram.getUser()))
        {
            updateUserProgram(fullProgram);
        }
        else
        {
            insertUserProgram(fullProgram);
        }
    }

    public boolean isProgramAlreadyEntry(Program program, User user){
        if (user==null){
            return false;
        }

        if (program == null){
            return false;
        }

        if(selectCountSimpleProgramByUser.selectForObject(makeNamedParams("userUUID", user.getUuid(), "programUUID", program.getUuid()))==0){
            return false;
        }

        return true;
    }


    public boolean isProgramAlreadyExist(String programUUID){

        if(selectCountSimpleProgram.selectForObject(makeSingleNamedParam("programUUID", programUUID))==0){
            return false;
        }

        return true;
    }

    public boolean isGroupAlreadyExist(String groupUUID){

        if(selectCountSimpleGroup.selectForObject(makeSingleNamedParam("groupUUID", groupUUID))==0){
            return false;
        }

        return true;
    }




    public void saveProgram(Program program) throws Exception{
            if (program != null){
                if(isProgramAlreadyExist(program.getUuid()))
                {
                    updateProgram.execute(makeSingleParam(program));

                    if(program.getGroups()!=null || !program.getGroups().isEmpty())
                    {
                        for(PropertyGroup g : program.getGroups())
                        {
                            if(!isGroupAlreadyExist(g.getGroupUuid()))
                            {
                                insertNewGroup.execute(makeSingleParam(g));
                                insertPropertyGroupInProgram.execute(makeNamedParams("programUUID",program.getUuid(),"groupUUID",g.getGroupUuid()));
                            }
                        }
                    }
                }else{
                    insertNewProgram.execute(makeSingleParam(program));
                    for(PropertyGroup g : program.getGroups())
                        {
                            if(!isGroupAlreadyExist(g.getGroupUuid()))
                            {
                                insertNewGroup.execute(makeSingleParam(g));
                            }
                            insertPropertyGroupInProgram.execute(makeNamedParams("programUUID",program.getUuid(),"groupUUID",g.getGroupUuid()));
                        }
                }

            }else
            {
                throw new NullPointerException("Save new program parametr is null");
            }
    }
}

package ua.com.parkcode.web.ptp.actions;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import org.apache.myfaces.custom.fileupload.UploadedFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ua.com.parkcode.commons.utils.IOUtils;
import ua.com.parkcode.commons.web.faces.actions.AbstractAction;
import ua.com.parkcode.web.ptp.ApplicationManager;
import ua.com.parkcode.web.ptp.data.Program;
import ua.com.parkcode.web.ptp.data.Resource;
import ua.com.parkcode.web.ptp.data.ResourceForProgram;
import ua.com.parkcode.web.ptp.data.User;
import ua.com.parkcode.web.ptp.services.ProgramService;
import ua.com.parkcode.web.ptp.services.ResourceService;
import ua.com.parkcode.web.ptp.services.UserService;

/**
 * <b>Предназначение:</b><br/>
 * <p>
 * </p>
 *
 * <br/><b>Описание:</b><br/>
 * <p>
 * </p>
 *
 * <br/>Создан 2013.11.19<br/>
 *
 * @author Artem (g-art) Gerasimenko || gerasimenko.art@gmail.com
 */
@ManagedBean(name = "uploadFile")
@ViewScoped
public class UploadFileAction extends AbstractAction
{

    private static final long serialVersionUID = -7454593135184649441L;

    private static final Logger LOGGER = LoggerFactory.getLogger(UploadFileAction.class);

    private transient UserService userService;
    private transient ProgramService programService;
    private transient ResourceService resourceService;

    private transient UploadedFile uploadedPhoto;
    private transient UploadedFile uploadedPassport;
    private transient UploadedFile uploadedPassportSecondPage;
    private transient UploadedFile uploadedForeignPassport;
    private transient UploadedFile uploadedMVS;
    private transient UploadedFile uploadedСertificateEmployment;

    private Program program;

    @PostConstruct
    private void init()
    {
        String entryUUID = getRequest().getParameter("pgmF");
        String userUUID = getRequest().getParameter("mu");
        try
        {
            User user = getUserService().selectUserByUUID(userUUID);

            if (user != null && (user.roleIs(2) || user.roleIs(3)))
            {

                program = getProgramService().selectProgramFormByEntryUUID(entryUUID);
                program.setEntryUUID(entryUUID);

            }
            else
            {
                setErrorMessage("Нет доступа");
            }
        } catch (Exception ex)
        {
            LOGGER.error("Eror", ex);
            setErrorMessage("Нет доступа");
        }
    }

    public String save()
    {
        try
        {
            if (uploadedPhoto != null)
            {
                if (program.getPhoto() == null)
                {
                    program.setPhoto(new ResourceForProgram());
                    program.setPhoto(uploadedFile(uploadedPhoto, program.getPhoto(), ApplicationManager.RESOURCE_PARAM__TYPE_PROGRAM_USER_PHOTO));
                }
                else
                {
                    if (uploadedPhoto.getSize() != program.getPhoto().getFileSize())
                    {
                        program.setPhoto(uploadedFile(uploadedPhoto, program.getPhoto(), ApplicationManager.RESOURCE_PARAM__TYPE_PROGRAM_USER_PHOTO));
                    }
                }
            }
            if (uploadedPassport != null)
            {
                if (program.getPassport() == null)
                {
                    program.setPassport(new ResourceForProgram());
                    program.setPassport(uploadedFile(uploadedPassport, program.getPassport(), ApplicationManager.RESOURCE_PARAM__TYPE_PROGRAM_PASSPORT));
                }
                else
                {
                    if (uploadedPassport.getSize() != program.getPassport().getFileSize())
                    {
                        program.setPassport(uploadedFile(uploadedPassport, program.getPassport(), ApplicationManager.RESOURCE_PARAM__TYPE_PROGRAM_PASSPORT));
                    }
                }
            }
            if (uploadedPassportSecondPage != null)
            {
                if (program.getPassportSecondPage() == null)
                {
                    program.setPassportSecondPage(new ResourceForProgram());
                    program.setPassportSecondPage(uploadedFile(uploadedPassportSecondPage, program.getPassportSecondPage(), ApplicationManager.RESOURCE_PARAM__TYPE_PROGRAM_PASSPORT_SECOND_PAGE));
                }
                else
                {
                    if (uploadedPassportSecondPage.getSize() != program.getPassportSecondPage().getFileSize())
                    {
                        program.setPassportSecondPage(uploadedFile(uploadedPassportSecondPage, program.getPassportSecondPage(), ApplicationManager.RESOURCE_PARAM__TYPE_PROGRAM_PASSPORT_SECOND_PAGE));
                    }
                }
            }
            if (uploadedForeignPassport != null)
            {
                if (program.getFirstPageForeignPassport() == null)
                {
                    program.setFirstPageForeignPassport(new ResourceForProgram());
                    program.setFirstPageForeignPassport(uploadedFile(uploadedForeignPassport, program.getFirstPageForeignPassport(), ApplicationManager.RESOURCE_PARAM__TYPE_PROGRAM_FOREIGN_PASSPORT));
                }
                else
                {
                    if (uploadedForeignPassport.getSize() != program.getFirstPageForeignPassport().getFileSize())
                    {
                        program.setFirstPageForeignPassport(uploadedFile(uploadedForeignPassport, program.getFirstPageForeignPassport(), ApplicationManager.RESOURCE_PARAM__TYPE_PROGRAM_FOREIGN_PASSPORT));
                    }
                }
            }
            if (uploadedMVS != null)
            {
                if (program.getMvs() == null)
                {
                    program.setMvs(new ResourceForProgram());
                    program.setMvs(uploadedFile(uploadedMVS, program.getMvs(), ApplicationManager.RESOURCE_PARAM__TYPE_PROGRAM_MVS));
                }
                else
                {
                    if (uploadedMVS.getSize() != program.getMvs().getFileSize())
                    {
                        program.setMvs(uploadedFile(uploadedMVS, program.getMvs(), ApplicationManager.RESOURCE_PARAM__TYPE_PROGRAM_MVS));
                    }
                }
            }
            if (uploadedСertificateEmployment != null)
            {
                if (program.getCertificateEmployment() == null)
                {
                    program.setCertificateEmployment(new ResourceForProgram());
                    program.setCertificateEmployment(uploadedFile(uploadedСertificateEmployment, program.getCertificateEmployment(), ApplicationManager.RESOURCE_PARAM__TYPE_СERTIFICATE_EMPLOYMENT));
                }
                else
                {
                    if (uploadedСertificateEmployment.getSize() != program.getCertificateEmployment().getFileSize())
                    {
                        program.setCertificateEmployment(uploadedFile(uploadedСertificateEmployment, program.getCertificateEmployment(), ApplicationManager.RESOURCE_PARAM__TYPE_СERTIFICATE_EMPLOYMENT));
                    }
                }
            }

        } catch (Exception ex)
        {
            LOGGER.error("Error file uplode", ex);
            setErrorMessage("Помилка збереження");
            return null;
        }


        return null;
    }

    // <editor-fold defaultstate="collapsed" desc="Getter && Setter">
    public Program getProgram()
    {
        return program;
    }

    public void setProgram(Program program)
    {
        this.program = program;
    }

    public UploadedFile getUploadedPhoto()
    {
        return uploadedPhoto;
    }

    public void setUploadedPhoto(UploadedFile uploadedPhoto)
    {
        this.uploadedPhoto = uploadedPhoto;
    }

    public UploadedFile getUploadedPassport()
    {
        return uploadedPassport;
    }

    public void setUploadedPassport(UploadedFile uploadedPassport)
    {
        this.uploadedPassport = uploadedPassport;
    }

    public UploadedFile getUploadedPassportSecondPage()
    {
        return uploadedPassportSecondPage;
    }

    public void setUploadedPassportSecondPage(UploadedFile uploadedPassportSecondPage)
    {
        this.uploadedPassportSecondPage = uploadedPassportSecondPage;
    }

    public UploadedFile getUploadedForeignPassport()
    {
        return uploadedForeignPassport;
    }

    public void setUploadedForeignPassport(UploadedFile uploadedForeignPassport)
    {
        this.uploadedForeignPassport = uploadedForeignPassport;
    }

    public UploadedFile getUploadedMVS()
    {
        return uploadedMVS;
    }

    public void setUploadedMVS(UploadedFile uploadedMVS)
    {
        this.uploadedMVS = uploadedMVS;
    }

    public UploadedFile getUploadedСertificateEmployment()
    {
        return uploadedСertificateEmployment;
    }

    public void setUploadedСertificateEmployment(UploadedFile uploadedСertificateEmployment)
    {
        this.uploadedСertificateEmployment = uploadedСertificateEmployment;
    }

// </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Services">

    protected final ResourceService getResourceService()
    {
        if (resourceService == null)
        {
            resourceService = evaluateExpression("resourceService");
        }

        return resourceService;
    }

    private final UserService getUserService()
    {
        if (userService == null)
        {
            userService = evaluateExpression("userService");
        }
        return userService;
    }

    private final ProgramService getProgramService()
    {
        if (programService == null)
        {
            programService = evaluateExpression("programService");
        }
        return programService;
    }

// </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="File loader">
    private ResourceForProgram uploadedFile(UploadedFile uploadedFile, ResourceForProgram res, int type) throws IOException
    {
        if (uploadedFile != null)
        {
            // create and save resource
            Resource resource = new ResourceForProgram();
            resource.setOwnerUuid(program.getEntryUUID());

            if (!isHasError())
            {
                // save file
                String fileName = storeFile(getServletContext().getRealPath(resource.getResourcesOwneredDir()), uploadedFile, (res.getPath() != null ? res.getPath() : null));

                resource.setUuid(null);
                resource.setPath(fileName);
                resource.setFileSize(uploadedFile.getSize());
                resource.setMimeType(uploadedFile.getContentType());
                resource.setOriginalName(uploadedFile.getName());
                resource.setResourceType(type);

                // save resources
                getResourceService().deleteResources(res.getUuid());
                getResourceService().insertResource(resource);

                // remember banner
                return (ResourceForProgram) resource;
            }
            else
            {
                throw new IllegalStateException(getErrorMessage());

            }

        }
        return null;
    }

    private String storeFile(String baseDir, UploadedFile file, String oldPath)
    {
        if (file != null)
        {
            boolean backUpped = false;
            String oldFileName = null;

            if (org.apache.commons.lang.StringUtils.isNotBlank(oldPath))
            {
                oldFileName = IOUtils.concatPath(baseDir, oldPath);

                if (new File(oldFileName).exists())
                {
                    backUpped = true;
                    try
                    {
                        IOUtils.moveFile(oldFileName, oldFileName + ".backup");
                    } catch (Throwable th)
                    {
                        LOGGER.error("Resource file backup error.", th);
                        setErrorMessage(
                                "Виникла помилка при резервному копіюванні старого файла<br /><br />"
                                + "Повторіть завантаження файла. Якщо помилки будуть повторюватися<br />"
                                + " - звертайтесь до розробників.");

                        return null;
                    }
                }
            }

            String fileName = file.getName();
            fileName = IOUtils.extractFileName(fileName);
            fileName = IOUtils.makeUniversalFileName(fileName);
            fileName = IOUtils.makeUniqueFileName(baseDir, fileName);

            try
            {
                new File(baseDir).mkdirs();
                IOUtils.copy(file.getInputStream(), new FileOutputStream(new File(IOUtils.concatPath(baseDir, fileName))));
            } catch (Throwable th)
            {
                LOGGER.error("Reesource file copy error.", th);
                setErrorMessage(
                        "Виникла помилка при завантаженні файла!<br />"
                        + "Повторіть завантаження файла. Якщо помилки будуть повторюватися<br />"
                        + " - звертайтесь до розробників.");

                if (backUpped && new File(oldFileName + ".backup").exists())
                {
                    try
                    {
                        IOUtils.moveFile(oldFileName + ".backup", oldFileName);
                    } catch (Throwable th2)
                    {
                        LOGGER.error("Resource file backup restore error.", th2);
                    }

                    setErrorMessage(
                            "Виникла помилка при завантаженні файла!<br />"
                            + "Старий файл було відновлено. <br /><br />"
                            + "Повторіть завантаження файла. Якщо помилки будуть повторюватися<br />"
                            + " - звертайтесь до розробників.");
                }

                return null;
            } finally
            {
                if (backUpped)
                {
                    File backupFile = new File(oldFileName + ".backup");

                    if (backupFile.exists())
                    {
                        try
                        {
                            backupFile.delete();
                        } catch (Throwable ignore)
                        {
                            // just log
                            LOGGER.error("Delete backup resource file error", ignore);
                        }
                    }
                }
            }

            return fileName;
        }

        return null;
    }

// </editor-fold>
}
